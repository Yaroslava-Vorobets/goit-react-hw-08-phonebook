{"version":3,"file":"static/js/99.09fbcf51.chunk.js","mappings":"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","sources":["components/FormFolder/Form.Styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/FormFolder/Form.jsx","components/FilterFolder/Filter.Styled.js","components/FilterFolder/Filter.jsx","components/ContactElementFolder/ContactElement.Styled.js","components/ContactElementFolder/ContactElement.jsx","components/ContactListFolder/List.Styled.js","components/ContactListFolder/ContactList.jsx","Global.Styles.js","../node_modules/@chakra-ui/layout/src/heading.tsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const Form = styled.form`     \n    border: 4px solid #FAF5FF;\n    border-radius: 8px;\n    background: #E9D8FD;   \n    display: flex;\n    flex-direction: column;    \n    justify-content: center;    \n    margin: 0 auto; \n    padding: 20px; `\n\nexport const Label = styled.label`   \n    text-shadow: 0 1px 0 rgb(170 227 246), 0px 2px 0  rgb(170 227 246);\n    text-transform: uppercase;   \n    color: #B794F4;\n    margin-bottom: 10px;\n    letter-spacing: 4px;\n    font: normal 26px Verdana, Helvetica;\n   ` \n   \n    export const Input = styled.input`   \n    border: 2px solid #FAF5FF;\n    border-radius: 4px;\n    padding: 6px 16px 6px 20px;\n    margin: 0 0 6px 0; \n    color: #5F5F5F;\n    box-shadow: \n    inset 0 2px 0 rgba(0,0,0,.2), \n    0 0 4px rgba(0,0,0,0.1);`\n\n     export const Button = styled.button`   \n    width: 200px;  \n    display: inline-block;\n    margin: auto;\n    margin-top: 10px;\n    padding: 15px 15px;\n    color: #fff;\n    background: #9F7AEA;\n    border: 0px;\n    border-radius: 12px;\n    cursor: pointer;\n    transition: all 0.3s ease-out;\n    box-shadow:\n    inset 0px 2px 2px rgba(255,255,255,0.6),\n    2px 2px 2px rgba(0,0,0,0.1),\n    0 0 4px 1px rgba(0,0,0,0.2);`\n\n    export const List = styled.ul`\n    padding-left:0;\n    display: flex;\n    justify-content: center;    \n    margin: 0 auto;   \n `;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\n\nexport const selectContact = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector([selectContact, selectFilter],\n    (contacts, filter) => {     \n        const normalizedFilter = filter.toLowerCase().trim();\n        return contacts.filter(({ name})  =>\n      name.toLowerCase().includes(normalizedFilter))\n})\n","\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState} from 'react';\nimport {Form, Label, Input,  Button, } from './Form.Styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport {selectContact} from 'redux/contacts/selectors'\nimport { Box, Container, } from '@chakra-ui/react'\n\n\n\nexport default function ContactForm () {  \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContact);\n    const dispatch = useDispatch();\n     console.log(contacts)\n   \n\n  const  handleChange = e => {\n      const { name, value } = e.target;\n      console.log(name,value)\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;            \n            default:\n                return;   \n       }      \n    } \n   \n    const reset = () =>{  \n    setName('');\n    setNumber('');}\n    \n  const  handleSubmit = e => {            \n      e.preventDefault();\n      if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n         toast(`${name} is alredy in contacts`);\n      return;\n      }\n       if (contacts.find(contact => contact.number === number)) {\n         toast(`${number} is alredy in contacts`);\n      return;\n    }\n \n      dispatch(addContact({ name, number}))\n    reset ()\n        \n    }   \n       \n        return (\n            <Box>\n                <Container maxW=\"container.lg\" p= {6}>\n                    <Form onSubmit = {handleSubmit}>\n                        <Label  htmlFor=\"fname\">Name </Label>\n                        < Input\n                            onChange={handleChange}\n                            value={name}\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                            />               \n                        <Label  htmlFor=\"fname\">Number</Label > \n                            < Input\n                            onChange={handleChange}\n                            value={number}\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            required\n                            />                    \n                        < Button type = \"submit\" >add contact</ Button>                \n                    </Form>            \n                </Container>\n            </Box>\n        )\n}\n    //якщо без стейту\n// import { useDispatch, useSelector } from 'react-redux';\n// // import { useState } from 'react';\n// import { Form, Label, Input, Button } from './Form.Styled';\n// import { addContact } from 'redux/operations';\n// import { toast } from 'react-toastify';\n// import { selectContact } from 'redux/selectors';\n\n// export default function ContactForm() {\n//   //   const [name, setName] = useState('');\n//   //   const [number, setNumber] = useState('');\n//   const contacts = useSelector(selectContact);\n//   const dispatch = useDispatch();\n//   //   console.log(contacts);\n\n//   //   const handleChange = e => {\n//   //     const { name, value } = e.target;\n\n//   //     console.log(name, value);\n//   //     switch (name) {\n//   //       case 'name':\n//   //         setName(value);\n//   //         break;\n//   //       case 'number':\n//   //         setNumber(value);\n//   //         break;\n//   //       default:\n//   //         return;\n//   //     }\n//   //   };\n\n//   //   const reset = setName(''),\n//   //   setNumber('');\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     let name = e.target.name.value;\n//     let number = e.target.number.value;\n//     const reset = () => {\n//       return (name = ''), (number = '');\n//     };\n\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === name.toLowerCase()\n//       )\n//     ) {\n//       toast(`${name} is alredy in contacts`);\n//       return;\n//     }\n//     if (contacts.find(contact => contact.number === number)) {\n//       toast(`${number} is alredy in contacts`);\n//       return;\n//     }\n\n//     dispatch(addContact({name, phone: number}));\n//     reset();\n//   };\n\n//   return (\n//     <>\n//       <Form onSubmit={handleSubmit}>\n//         <Label htmlFor=\"fname\">Name </Label>\n//         <Input\n//           //   onChange={handleChange}\n//           //   value={name}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//         <Label htmlFor=\"fname\">Number</Label>\n//         <Input\n//           //          onChange={handleChange}\n//           //   value={number}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//         <Button type=\"submit\">add contact</Button>\n//       </Form>\n//     </>\n//   );\n// }\n \n\n","import styled from 'styled-components';\n\nexport const Label = styled.label`   \n    text-shadow: 0 1px 0 rgb(170 227 246), 0px 2px 0  rgb(170 227 246);\n    text-transform: uppercase;   \n    color:  #B794F4;\n    margin-bottom: 10px;\n    letter-spacing: 4px;\n    font: normal 26px Verdana, Helvetica;    \n   ` \n\nexport const Input = styled.input`   \n    border: 2px solid #ebf2fc;\n    border-radius: 4px; \n    padding: 10px;\n    width: 40%;\n    margin-left: 10px; \n     margin-bottom: 10px; \n    color: #5F5F5F;\n    box-shadow: \n    inset 0 2px 0 rgba(0,0,0,.2), \n    0 0 4px rgba(0,0,0,0.1);`","\nimport { Input, Label } from './Filter.Styled';\n\nimport {statusFilter} from 'redux/contacts/FilterSlise';\nimport {useDispatch} from 'react-redux';\n\nconst Filter = () => {\n\n    const dispatch = useDispatch();\n    const filter = e => e.target.value;\nconsole.log(filter)\n\n    return (\n         <>\n            <Label htmlFor=\"fname\">Fined contacts by name</Label>       \n            <Input\n                onChange={e => dispatch(statusFilter(e.target.value))}           \n                type=\"text\"\n                name=\"filter\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                />\n            </>\n\n    )\n}\n\n\n    export default Filter;","import styled from 'styled-components';\n\n\nexport const ListEl = styled.li`\n    list-style: none;\n    border-radius: 5px;\n    padding: 23px;     \n    display: flex;\n    align-items: center;\n    justify-content:space-between;\n    background-color: #E9D8FD;\n    border: 1px solid #FAF5FF;\n `;  \n\n export const Text = styled.div`  \n    display: flex;   \n    align-items: center;\n    padding: 0 34px;\n    background-color:  #FAF5FF;\n    border: 1px solid #a4a6a8;\n    border-radius: 5px;\n `;  \n\n export const TextEl = styled.div`  \n    margin-right: 10px;\n    padding: 10px 0;    \n    \n `; \n \n  export const Button = styled.button` \n    background-color:#9F7AEA;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px; `","import PropTypes from 'prop-types';\nimport { ListEl, Text, TextEl, Button } from './ContactElement.Styled';\nimport {useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\n  \nconst ContactElement = ({ id, name, number }) => {\nconst dispatch = useDispatch();\n\n    return (\n           <ListEl key={id}>\n            <Text>\n                 <TextEl >{name}:</TextEl >\n                <TextEl > {number}</TextEl >\n            </Text>               \n                <Button onClick={() => dispatch(deleteContact(id))} type=\"button\">Delete</Button>\n            </ListEl> \n    )\n} \n   \n\nContactElement.propTypes = {\n    id:  PropTypes.string.isRequired,\n    name:  PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n   \n}\n\nexport default ContactElement; ","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    padding-left:0;\n    display: flex;\n    flex-direction: column;\n `;\n","import {useSelector}from 'react-redux';\nimport ContactElement from '../ContactElementFolder/ContactElement'\nimport { List } from './List.Styled';\nimport { selectVisibleContacts} from 'redux/contacts/selectors';\n\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);  \n\n  return (\n     <List>\n        {visibleContacts.map(({ id, name, number }) =>      \n                <ContactElement key={id}                         \n                      name={name}\n                      id={id}\n                      number={number} /> \n        )}                 \n    </List>\n  )\n  \n}\n  \n\n\n          ","import 'modern-normalize';\nimport styled from 'styled-components';\n\nimport { createGlobalStyle } from \"styled-components\"\n\nexport const GlobalStyle = createGlobalStyle`\n   body {\n//   margin: 0;\n//   padding: 15px;\n//   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n//     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n//     sans-serif;\n//   -webkit-font-smoothing: antialiased;\n//   -moz-osx-font-smoothing: grayscale;\n// }\n// code {\n//   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n//     monospace;\n// }\n// ul {\n//   list-style: none;\n//   text-decoration: none;\n//   padding: 0;\n//   margin: 0;\n// }\n// h1,\n// h2,\n// h3 {\n//   margin: 0;\n// }\n// p {\n//   margin: 0;\n// }\n// img {\n//   display: block;\n//   max-width: 100%;\n//   width: 100%;\n//   height: auto;\n// }\n`\n\nexport const Wrap = styled.div` \n    max-width: 800px;\n    margin: auto;    \n    padding-left: 16px;\n    padding-right: 16px;\n    padding-bottom: 20px;\n    `\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","\nimport 'modern-normalize';\nimport ContactForm from '../components/FormFolder/Form';\nimport Filter from '../components/FilterFolder/Filter';\nimport {ContactList} from '../components/ContactListFolder/ContactList';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { Wrap } from 'Global.Styles'\nimport { useEffect } from 'react';\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { fetchContacts} from \"redux/contacts/operations\";\nimport { selectContact, selectError, selectIsLoading, } from \"redux/contacts/selectors\";\nimport { Spinner } from '../components/Spinner/Spinner.jsx';\nimport { Heading } from '@chakra-ui/react'\n\n\nexport default function App() {\n const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContact);\n\n\n  useEffect(() => {     \n    dispatch (fetchContacts())\n},[dispatch])\n   \n    return (\n        <>\n        <Wrap>\n          <Heading as='h1' size='xl' color ='#44337A' mb = '4'> Phonebook</Heading>           \n            <Filter          \n          />     \n          <ContactForm        \n          />     \n          <Heading as='h2' size='lg' mb = '4' color ='#44337A'>\n            Contacts\n          </Heading> \n          {isLoading && !error && <Spinner />}\n          {contacts.length > 0 &&  <ContactList         \n          />}         \n        </Wrap>\n        <ToastContainer autoClose={2000} />   \n        </>\n      )   \n    }\n\n\n\n\n"],"names":["Form","styled","Label","Input","Button","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContact","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","normalizedFilter","toLowerCase","trim","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","console","log","handleChange","e","target","maxW","p","onSubmit","preventDefault","contact","toast","addContact","htmlFor","onChange","type","pattern","title","required","statusFilter","ListEl","Text","TextEl","id","onClick","deleteContact","List","ContactList","visibleContacts","Wrap","createGlobalStyle","props","forwardRef","styles","className","rest","useStyleConfig","omitThemingProps","__css","h2","Heading","chakra","cx","App","useEffect","fetchContacts","as","size","color","mb","Spinner","autoClose"],"sourceRoot":""}